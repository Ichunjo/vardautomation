from __future__ import annotations

import xml.etree.ElementTree as ET
from typing import Any, Dict, List, Optional, overload


class Track:
    def __eq__(self, other: object) -> bool: ...
    def __getattribute__(self, name: str) -> Any: ...
    track_type: Any
    def __init__(self, xml_dom_fragment: ET.Element) -> None: ...
    def to_data(self) -> Dict[str, Any]: ...

class MediaInfo:
    def __eq__(self, other: object) -> bool: ...
    tracks: Any
    def __init__(self, xml: str, encoding_errors: str = ...) -> None: ...
    @property
    def general_tracks(self) -> List[Track]: ...
    @property
    def video_tracks(self) -> List[Track]: ...
    @property
    def audio_tracks(self) -> List[Track]: ...
    @property
    def text_tracks(self) -> List[Track]: ...
    @property
    def other_tracks(self) -> List[Track]: ...
    @property
    def image_tracks(self) -> List[Track]: ...
    @property
    def menu_tracks(self) -> List[Track]: ...
    @classmethod
    def can_parse(cls, library_file: Optional[str] = ...) -> bool: ...
    @overload
    @classmethod
    def parse(cls, filename: Any, library_file: Optional[str] = ..., cover_data: bool = ..., encoding_errors: str = ..., parse_speed: float = ..., full: bool = ..., legacy_stream_display: bool = ..., mediainfo_options: Optional[Dict[str, str]] = ..., output: None = ...) -> MediaInfo: ...  # type: ignore
    @overload
    @classmethod
    def parse(cls, filename: Any, library_file: Optional[str] = ..., cover_data: bool = ..., encoding_errors: str = ..., parse_speed: float = ..., full: bool = ..., legacy_stream_display: bool = ..., mediainfo_options: Optional[Dict[str, str]] = ..., output: str = ...) -> str: ...
    def to_data(self) -> Dict[str, Any]: ...
    def to_json(self) -> str: ...
